from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from .models import Post, CustomUser, RoleChoices, Lab
from django.contrib.auth import  logout
from .forms import CustomUserCreationForm, PostForm
from django.contrib.auth.views import LoginView
from django.views.generic import ListView, CreateView, DetailView
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.views import generic
from django.db.models import Q
from django.views.generic import TemplateView


def index(request):
    return render(request, 'ele/index.html')
    
def dev(request):
    return render(request, 'ele/dev.html')

def p_e(request):
    return render(request, 'ele/Power_Electronics.html')

def s_p(request):
    return render(request, 'ele/signal_processing.html')


def c_s(request):
    return render(request, 'ele/control_system.html')


def labs(request):
    return render(request, 'ele/labs.html')

def academics(request):
    return render(request, 'ele/academics.html')


def under_graduate_programmes(request):
    return render(request, 'ele/undergraduate_programmes.html')

def research(request):
    return render(request, 'ele/research.html')

def user_detail(request, username):
    user = get_object_or_404(CustomUser, username=username)
    if user.role == RoleChoices.ALUMNI.value:
        posts = Post.objects.filter(author=user)
        return render(request, 'ele/user_detail.html', {'user': user, 'posts': posts})
    elif user.role == RoleChoices.FACULTY.value:
        posts = Post.objects.filter(author=user)

        return render(request, 'ele/user_detail.html', {'user': user, 'posts':posts})
    else:
        return HttpResponse('Invalid user role')
    
class PostListView(ListView):
    model = Post
    template_name = 'ele/post_list.html'
    paginate_by = 12

    def get_queryset(self):
        queryset = super().get_queryset()
        search_query = self.request.GET.get('search')
        if search_query:
            queryset = queryset.filter(title__icontains=search_query)
        return queryset


class LabView(ListView):
    model = Lab
    template_name = 'ele/labs.html'


    
class Guide(TemplateView):
    template_name = "ele/how_to_guides.html"
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        section = self.kwargs['section']
        context['section_title'] = section.replace('_', ' ')
        # Replace the above line with your logic to fetch the content for each section
        # and pass it to the template
        return context

def signup(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = CustomUserCreationForm()
    return render(request, 'ele/signup.html', {'form': form})

class CustomLoginView(LoginView):
    template_name = 'ele/loginpage.html'
    success_url = '/'

    def get_success_url(self):
        user = self.request.user
        if user.is_authenticated:
            if user.role == RoleChoices.ALUMNI.value:
                return reverse('user_profile', kwargs={'username': user.username})
            elif user.role == RoleChoices.FACULTY.value:
                return reverse('user_profile', kwargs={'username': user.username})
            elif user.is_superuser:
                return reverse('index')
            else:
                return super().get_success_url()
        else:
            return super().get_success_url()



def user_profile(request, username):
    user = get_object_or_404(CustomUser, username=username)
    if user.role == RoleChoices.ALUMNI.value:
        posts = Post.objects.filter(author=user)
        return render(request, 'ele/profile.html', {'user': user, 'posts': posts})
    elif user.role == RoleChoices.FACULTY.value:
        posts = Post.objects.filter(author=user)

        return render(request, 'ele/profile.html', {'user': user, 'posts':posts})
    else:
        return HttpResponse('Invalid user role')
    


class UserListView(ListView):
    model = CustomUser
    template_name = 'ele/user_list.html'
    context_object_name = 'users'

    def get_queryset(self):
        role = self.kwargs.get('role')
        if role == 'Faculty':
            queryset = CustomUser.objects.filter(role=RoleChoices.FACULTY.value)
        elif role == 'Alumni':
            queryset = CustomUser.objects.filter(role=RoleChoices.ALUMNI.value)
        elif role == 'Staff':
            queryset = CustomUser.objects.filter(role=RoleChoices.STAFF.value)
        else:
            queryset = CustomUser.objects.all()

        query = self.request.GET.get('query')
        if query:
            queryset = queryset.filter(Q(username__icontains=query) | Q(subjects__icontains=query))

        return queryset

        

@login_required(login_url="login")
def create_post(request):
    if request.method == 'POST':
        form = PostForm(request.POST, request.FILES)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.save()
            return redirect('user_profile', username = request.user.username)
    else:
        form = PostForm()
    return render(request, 'ele/add_post.html', {'form': form})

# logout view

@login_required
def logout_view(request):
    logout(request)
    return redirect('login')



class PostDetailView(DetailView):
    model = Post
    template_name = 'ele/post_detail.html'


class Ishu(reuqest):
    return HttpResponse("This is ishwer dutt")

# searching users

